{
	"id": "30e946b1-0d75-8a8e-0d20-939a8ed90238",
	"name": "ZeroC0D3 TestCase API",
	"allTests": [],
	"timestamp": 1479592853417,
	"collection_id": "1c88d910-7048-d30d-7071-22fca341b2ee",
	"folder_id": 0,
	"target_type": "collection",
	"environment_id": "0",
	"data": [],
	"delay": 0,
	"count": 1,
	"collection": {
		"id": "1c88d910-7048-d30d-7071-22fca341b2ee",
		"name": "ZeroC0D3 TestCase API",
		"description": "ZeroC0D3 Team - TestCase API Postman Collection",
		"order": [],
		"folders": [
			{
				"id": "25032327-f538-397d-9379-b50c6c061f0d",
				"name": "00 Load External Library",
				"description": "Load external library postman using PostmanBDD\n\nBDD test framework for Postman and Newman\nhttps://github.com/BigstickCarpet/postman-bdd",
				"order": [
					"23f39c5a-80d9-3c22-3af9-42f46997a775"
				],
				"owner": "260154",
				"collection_id": "1c88d910-7048-d30d-7071-22fca341b2ee",
				"collection": "1c88d910-7048-d30d-7071-22fca341b2ee",
				"collectionId": "1c88d910-7048-d30d-7071-22fca341b2ee"
			},
			{
				"id": "836f826f-9b8b-413e-8530-867eecfaddc6",
				"name": "01 TestCase From Random User",
				"description": "Random User\nhttps://randomuser.me/api/?nat=us&gender=male",
				"write": true,
				"order": [
					"df9739a6-d1a7-fe17-991d-29696cb48ea3",
					"13349309-c098-7c83-f8ab-3db372516bd1",
					"cbec48e5-bdb6-cdc0-0924-e1ae316c4902"
				],
				"collection": "1c88d910-7048-d30d-7071-22fca341b2ee",
				"owner": "260154",
				"collection_id": "1c88d910-7048-d30d-7071-22fca341b2ee",
				"collectionId": "1c88d910-7048-d30d-7071-22fca341b2ee"
			}
		],
		"requests": [
			{
				"id": "13349309-c098-7c83-f8ab-3db372516bd1",
				"headers": "",
				"url": "https://randomuser.me/api/?nat=us&gender=male",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "GET",
				"data": [],
				"dataMode": "params",
				"tests": "/* =============== DESCRIPTION FILE ======================================== */\n/*                                                                           */\n/*   Module  : ZEROC0D3 JSON TEST API                                        */\n/*   Type    : POSTMAN JSON                                                  */\n/*   Author  : ZEROC0D3 Team                                                 */\n/*   Date    : November 2016                                                 */\n/*                                                                           */\n/*  __________                  _________ _______       .___________         */\n/*  \\____    /___________  ____ \\_   ___ \\\\   _  \\    __| _/\\_____  \\ Team   */\n/*    /     // __ \\_  __ \\/  _ \\/    \\  \\//  /_\\  \\  / __ |   _(__  <        */   \n/*   /     /\\  ___/|  | \\(  <_> )     \\___\\  \\_/   \\/ /_/ |  /       \\       */\n/*  /_______ \\___  >__|   \\____/ \\______  /\\_____  /\\____ | /______  /       */\n/*          \\/   \\/                     \\/       \\/      \\/        \\/        */\n/*                                                                           */\n/*  ZeroC0d3 Team                                                            */  \n/*  [ N0th1ng Imp0ss1bl3, Grey Hat Coder ]                                   */\n/*  --------------------------------------------------------                 */\n/*  http://pastebin.com/u/zeroc0d3                                           */\n/*  https://github.com/zeroc0d3                                              */\n/*                                                                           */\n/* ========================================================================= */\n\n// -------------------------------------------- //\n//  JSON Response Body                          //\n// -------------------------------------------- //\n/*\n{\n  \"results\": [\n    {\n      \"gender\": \"male\",\n      \"name\": {\n        \"title\": \"mr\",\n        \"first\": \"dave\",\n        \"last\": \"burke\"\n      },\n      \"location\": {\n        \"street\": \"1874 frances ct\",\n        \"city\": \"roseburg\",\n        \"state\": \"north carolina\",\n        \"postcode\": 74645\n      },\n      \"email\": \"dave.burke@example.com\",\n      \"login\": {\n        \"username\": \"purplepeacock176\",\n        \"password\": \"namaste\",\n        \"salt\": \"MSXPkXpD\",\n        \"md5\": \"d257b1a4729a70faaf8e3065890eff71\",\n        \"sha1\": \"d534a955cd1b41c6cbe83bb37c52728cec6c3b5b\",\n        \"sha256\": \"a645805f6bc0ea0e1ba2aa609b7171f6a0ad002586319571fa8f31c5201cc123\"\n      },\n      \"dob\": \"1944-10-16 19:29:43\",\n      \"registered\": \"2009-07-30 17:20:43\",\n      \"phone\": \"(952)-854-2321\",\n      \"cell\": \"(544)-376-5812\",\n      \"id\": {\n        \"name\": \"SSN\",\n        \"value\": \"647-46-1527\"\n      },\n      \"picture\": {\n        \"large\": \"https://randomuser.me/api/portraits/men/27.jpg\",\n        \"medium\": \"https://randomuser.me/api/portraits/med/men/27.jpg\",\n        \"thumbnail\": \"https://randomuser.me/api/portraits/thumb/men/27.jpg\"\n      },\n      \"nat\": \"US\"\n    }\n  ],\n  \"info\": {\n    \"seed\": \"cd6bbbe229bae617\",\n    \"results\": 1,\n    \"page\": 1,\n    \"version\": \"1.1\"\n  }\n}\n*/\n\n// ------------------------------------------- //\n//  TESTCASE PostmanBDD                        //\n// ------------------------------------------- //\n//  Load external library from Environment     //\n// ------------------------------------------- //\neval(postman.getGlobalVariable('module:postmanBDD'));\n\nvar error      = response.body.error;\nvar title_data = \"user\";\n\n// Run the test if not error\nif (!error) \n{\n    describe('Get '+title_data+' info => ', function() {\n        var zeroc0d3  = response.body.results[0];\n    \tvar z_gender  = zeroc0d3.gender;\n    \tvar z_name    = zeroc0d3.name;\n    \tvar z_address = zeroc0d3.location;\n    \tvar z_email   = zeroc0d3.email;\n    \t\t\n        it('should return user data', function() {\n           response.should.have.status(200);\n           response.should.be.json;\n           response.body.should.not.be.empty;\n        });\n    \n        it('should have a full name', function() {\n           z_name.should.be.an('object');\n           z_name.should.have.property('title').and.not.empty;\n           z_name.should.have.property('first').and.not.empty;\n           z_name.should.have.property('last').and.not.empty;\n        });\n        \n        it('should have a gender ('+z_gender+')', function() {\n           z_gender.should.equal(\"male\");\n        });\n        \n        it('should have a email ('+z_email+')', function() {\n           z_gender.should.not.empty;\n        });\n    \n        it('should have an address', function() {\n           z_address.should.be.an('object');\n           z_address.should.have.property('street').and.not.empty;\n           z_address.should.have.property('city').and.not.empty;\n        });    \n        \n    });    \n}\n\ntests[\"Successfully show \"+title_data+\" info\"] = !error;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1479554419046,
				"name": "Response JSON - Conditional",
				"description": "JSON response with some value check",
				"collectionId": "1c88d910-7048-d30d-7071-22fca341b2ee",
				"responses": []
			},
			{
				"id": "23f39c5a-80d9-3c22-3af9-42f46997a775",
				"headers": "Content-Type: application/json\n",
				"url": "http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "GET",
				"data": [],
				"dataMode": "params",
				"tests": "/* =============== DESCRIPTION FILE ======================================== */\n/*                                                                           */\n/*   Module  : ZEROC0D3 JSON TEST API                                        */\n/*   Type    : POSTMAN JSON                                                  */\n/*   Author  : ZEROC0D3 Team                                                 */\n/*   Date    : November 2016                                                 */\n/*                                                                           */\n/*  __________                  _________ _______       .___________         */\n/*  \\____    /___________  ____ \\_   ___ \\\\   _  \\    __| _/\\_____  \\ Team   */\n/*    /     // __ \\_  __ \\/  _ \\/    \\  \\//  /_\\  \\  / __ |   _(__  <        */   \n/*   /     /\\  ___/|  | \\(  <_> )     \\___\\  \\_/   \\/ /_/ |  /       \\       */\n/*  /_______ \\___  >__|   \\____/ \\______  /\\_____  /\\____ | /______  /       */\n/*          \\/   \\/                     \\/       \\/      \\/        \\/        */\n/*                                                                           */\n/*  ZeroC0d3 Team                                                            */  \n/*  [ N0th1ng Imp0ss1bl3, Grey Hat Coder ]                                   */\n/*  --------------------------------------------------------                 */\n/*  http://pastebin.com/u/zeroc0d3                                           */\n/*  https://github.com/zeroc0d3                                              */\n/*                                                                           */\n/* ========================================================================= */\n\n// ------------------------------------------- //\n//  TESTCASE PostmanBDD                        //\n// ------------------------------------------- //\n//  Get external library from URL & save to    //\n//  global environment as \"module:postmanBDD\"  //\n// ------------------------------------------- //\npostman.setGlobalVariable(\"module:postmanBDD\", responseBody);\ntry {\n    eval(responseBody);\n}\ncatch (e) { }\ntests['PostmanBDD library ready'] = (typeof describe === 'function');",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1479554427101,
				"name": "Fetch PostmanBDD",
				"description": "",
				"collectionId": "1c88d910-7048-d30d-7071-22fca341b2ee",
				"responses": []
			},
			{
				"id": "cbec48e5-bdb6-cdc0-0924-e1ae316c4902",
				"headers": "",
				"url": "https://randomuser.me/api/?nat=us&gender=male",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "GET",
				"data": [],
				"dataMode": "params",
				"tests": "/* =============== DESCRIPTION FILE ======================================== */\n/*                                                                           */\n/*   Module  : ZEROC0D3 JSON TEST API                                        */\n/*   Type    : POSTMAN JSON                                                  */\n/*   Author  : ZEROC0D3 Team                                                 */\n/*   Date    : November 2016                                                 */\n/*                                                                           */\n/*  __________                  _________ _______       .___________         */\n/*  \\____    /___________  ____ \\_   ___ \\\\   _  \\    __| _/\\_____  \\ Team   */\n/*    /     // __ \\_  __ \\/  _ \\/    \\  \\//  /_\\  \\  / __ |   _(__  <        */   \n/*   /     /\\  ___/|  | \\(  <_> )     \\___\\  \\_/   \\/ /_/ |  /       \\       */\n/*  /_______ \\___  >__|   \\____/ \\______  /\\_____  /\\____ | /______  /       */\n/*          \\/   \\/                     \\/       \\/      \\/        \\/        */\n/*                                                                           */\n/*  ZeroC0d3 Team                                                            */  \n/*  [ N0th1ng Imp0ss1bl3, Grey Hat Coder ]                                   */\n/*  --------------------------------------------------------                 */\n/*  http://pastebin.com/u/zeroc0d3                                           */\n/*  https://github.com/zeroc0d3                                              */\n/*                                                                           */\n/* ========================================================================= */\n\n// -------------------------------------------- //\n//  JSON Response Body                          //\n// -------------------------------------------- //\n/*\n{\n  \"results\": [\n    {\n      \"gender\": \"male\",\n      \"name\": {\n        \"title\": \"mr\",\n        \"first\": \"dave\",\n        \"last\": \"burke\"\n      },\n      \"location\": {\n        \"street\": \"1874 frances ct\",\n        \"city\": \"roseburg\",\n        \"state\": \"north carolina\",\n        \"postcode\": 74645\n      },\n      \"email\": \"dave.burke@example.com\",\n      \"login\": {\n        \"username\": \"purplepeacock176\",\n        \"password\": \"namaste\",\n        \"salt\": \"MSXPkXpD\",\n        \"md5\": \"d257b1a4729a70faaf8e3065890eff71\",\n        \"sha1\": \"d534a955cd1b41c6cbe83bb37c52728cec6c3b5b\",\n        \"sha256\": \"a645805f6bc0ea0e1ba2aa609b7171f6a0ad002586319571fa8f31c5201cc123\"\n      },\n      \"dob\": \"1944-10-16 19:29:43\",\n      \"registered\": \"2009-07-30 17:20:43\",\n      \"phone\": \"(952)-854-2321\",\n      \"cell\": \"(544)-376-5812\",\n      \"id\": {\n        \"name\": \"SSN\",\n        \"value\": \"647-46-1527\"\n      },\n      \"picture\": {\n        \"large\": \"https://randomuser.me/api/portraits/men/27.jpg\",\n        \"medium\": \"https://randomuser.me/api/portraits/med/men/27.jpg\",\n        \"thumbnail\": \"https://randomuser.me/api/portraits/thumb/men/27.jpg\"\n      },\n      \"nat\": \"US\"\n    }\n  ],\n  \"info\": {\n    \"seed\": \"cd6bbbe229bae617\",\n    \"results\": 1,\n    \"page\": 1,\n    \"version\": \"1.1\"\n  }\n}\n*/\n\n// ----------------------------------------- //\n//  JSON Schema References                   //                              \n// ----------------------------------------- //\n//  References: https://spacetelescope.github.io/understanding-json-schema/structuring.html\n\nvar schema_test = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \n    \"title\":\"User\",\n    \"description\":\"Detail user account\",\n    \n    \"definitions\": {\n        \"data_name\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"title\": { \"type\": \"string\" },\n                \"first\": { \"type\": \"string\" },\n                \"last\":  { \"type\": \"string\" }\n            },\n            \"required\": [\"title\", \"first\", \"last\"]\n        },\n        \n        \"data_location\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"street\":   { \"type\": \"string\" },\n                \"city\":     { \"type\": \"string\" },\n                \"state\":    { \"type\": \"string\" },\n                \"postcode\": { \"type\": \"integer\" }\n            },\n            \"required\": [\"street\", \"city\", \"state\", \"postcode\"]\n        },\n        \n        \"data_login\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"username\": { \"type\": \"string\" },\n                \"password\": { \"type\": \"string\" },\n                \"salt\":     { \"type\": \"string\" },\n                \"md5\":      { \"type\": \"string\" },\n                \"sha1\":     { \"type\": \"string\" },\n                \"sha256\":   { \"type\": \"string\" }\n            },\n            \"required\": [\"username\", \"password\", \"salt\", \"md5\", \"sha1\", \"sha256\"]\n        },\n        \n        \"data_id\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\":  { \"type\": \"string\" },\n                \"value\": { \"type\": \"string\" }\n            },\n            \"required\": [\"name\", \"value\"]\n        }\n    },\n    \n    \"type\": \"object\",\n    \"properties\": { \n        \"results\":\n        {\n            \"type\": \"array\",\n            \"properties\": { \n                \"gender\":   { \"type\": \"string\" },\n                \"name\":     { \"$ref\": \"#/definitions/data_name\" },\n                \"location\": { \"$ref\": \"#/definitions/data_location\" },\n                \"email\":    { \"type\": \"string\" },\n                \"login\":    { \"$ref\": \"#/definitions/data_login\" },\n                \"id\":       { \"$ref\": \"#/definitions/data_id\" },\n            }\n        },\n        \"info\":\n        {\n            \"type\": \"object\",\n            \"properties\": { \n                \"seed\":     { \"type\": \"string\" },\n                \"results\":  { \"type\": \"integer\" },\n                \"page\":     { \"type\": \"integer\" },\n                \"version\":  { \"type\": \"string\" },\n            }\n        },\n        \"additionalProperties\": false,\n        \"required\": [\"email\", \"registered\"]    \n    }\n};\n\n// ------------------------------------------- //\n//  TESTCASE PostmanBDD                        //\n// ------------------------------------------- //\n//  Load external library from Environment     //\n// ------------------------------------------- //\neval(postman.getGlobalVariable('module:postmanBDD'));\n\nvar error      = response.body.error;\nvar title_data = \"user\";\n\n// Run the test if not error\nif (!error) \n{\n    describe('Get '+title_data+' info => ', function() {\n        var zeroc0d3  = response.body.results[0];\n    \tvar z_gender  = zeroc0d3.gender;\n    \tvar z_name    = zeroc0d3.name;\n    \tvar z_address = zeroc0d3.location;\n    \tvar z_email   = zeroc0d3.email;\n    \t\t\n        it('should return user data', function() {\n           response.should.have.status(200);\n           response.should.be.json;\n           response.body.should.not.be.empty;\n        });\n    \n        it('should have a full name', function() {\n           z_name.should.be.an('object');\n           z_name.should.have.property('title').and.not.empty;\n           z_name.should.have.property('first').and.not.empty;\n           z_name.should.have.property('last').and.not.empty;\n        });\n        \n        it('should have a gender ('+z_gender+')', function() {\n           z_gender.should.equal(\"male\");\n        });\n        \n        it('should have a email ('+z_email+')', function() {\n           z_gender.should.not.empty;\n        });\n    \n        it('should have an address', function() {\n           z_address.should.be.an('object');\n           z_address.should.have.property('street').and.not.empty;\n           z_address.should.have.property('city').and.not.empty;\n        });    \n        \n        it('should validated format schema', function() {\n\t\t   response.body.should.have.schema(schema_test)\n\t\t});\n    });    \n}\n\ntests[\"Successfully show \"+title_data+\" info\"] = !error;",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1479554409184,
				"name": "Response JSON - Schema",
				"description": "JSON response with schema check",
				"collectionId": "1c88d910-7048-d30d-7071-22fca341b2ee",
				"responses": []
			},
			{
				"id": "df9739a6-d1a7-fe17-991d-29696cb48ea3",
				"headers": "",
				"url": "https://randomuser.me/api/?nat=us&gender=male",
				"preRequestScript": "",
				"pathVariables": {},
				"method": "GET",
				"data": [],
				"dataMode": "params",
				"tests": "/* =============== DESCRIPTION FILE ======================================== */\n/*                                                                           */\n/*   Module  : ZEROC0D3 JSON TEST API                                        */\n/*   Type    : POSTMAN JSON                                                  */\n/*   Author  : ZEROC0D3 Team                                                 */\n/*   Date    : November 2016                                                 */\n/*                                                                           */\n/*  __________                  _________ _______       .___________         */\n/*  \\____    /___________  ____ \\_   ___ \\\\   _  \\    __| _/\\_____  \\ Team   */\n/*    /     // __ \\_  __ \\/  _ \\/    \\  \\//  /_\\  \\  / __ |   _(__  <        */   \n/*   /     /\\  ___/|  | \\(  <_> )     \\___\\  \\_/   \\/ /_/ |  /       \\       */\n/*  /_______ \\___  >__|   \\____/ \\______  /\\_____  /\\____ | /______  /       */\n/*          \\/   \\/                     \\/       \\/      \\/        \\/        */\n/*                                                                           */\n/*  ZeroC0d3 Team                                                            */  \n/*  [ N0th1ng Imp0ss1bl3, Grey Hat Coder ]                                   */\n/*  --------------------------------------------------------                 */\n/*  http://pastebin.com/u/zeroc0d3                                           */\n/*  https://github.com/zeroc0d3                                              */\n/*                                                                           */\n/* ========================================================================= */\n\n// -------------------------------------------- //\n//  JSON Response Body                          //\n// -------------------------------------------- //\n/*\n{\n  \"results\": [\n    {\n      \"gender\": \"male\",\n      \"name\": {\n        \"title\": \"mr\",\n        \"first\": \"dave\",\n        \"last\": \"burke\"\n      },\n      \"location\": {\n        \"street\": \"1874 frances ct\",\n        \"city\": \"roseburg\",\n        \"state\": \"north carolina\",\n        \"postcode\": 74645\n      },\n      \"email\": \"dave.burke@example.com\",\n      \"login\": {\n        \"username\": \"purplepeacock176\",\n        \"password\": \"namaste\",\n        \"salt\": \"MSXPkXpD\",\n        \"md5\": \"d257b1a4729a70faaf8e3065890eff71\",\n        \"sha1\": \"d534a955cd1b41c6cbe83bb37c52728cec6c3b5b\",\n        \"sha256\": \"a645805f6bc0ea0e1ba2aa609b7171f6a0ad002586319571fa8f31c5201cc123\"\n      },\n      \"dob\": \"1944-10-16 19:29:43\",\n      \"registered\": \"2009-07-30 17:20:43\",\n      \"phone\": \"(952)-854-2321\",\n      \"cell\": \"(544)-376-5812\",\n      \"id\": {\n        \"name\": \"SSN\",\n        \"value\": \"647-46-1527\"\n      },\n      \"picture\": {\n        \"large\": \"https://randomuser.me/api/portraits/men/27.jpg\",\n        \"medium\": \"https://randomuser.me/api/portraits/med/men/27.jpg\",\n        \"thumbnail\": \"https://randomuser.me/api/portraits/thumb/men/27.jpg\"\n      },\n      \"nat\": \"US\"\n    }\n  ],\n  \"info\": {\n    \"seed\": \"cd6bbbe229bae617\",\n    \"results\": 1,\n    \"page\": 1,\n    \"version\": \"1.1\"\n  }\n}\n*/\n\n// ------------------------------------------- //\n//  TESTCASE PostmanBDD                        //\n// ------------------------------------------- //\n//  Load external library from Environment     //\n// ------------------------------------------- //\neval(postman.getGlobalVariable('module:postmanBDD'));\n\nvar title_data          = \"user\";\ndescribe('Get '+title_data+' info => ', function() {\n    var zeroc0d3  = response.body.results[0];\n\tvar z_gender  = zeroc0d3.gender;\n\tvar z_name    = zeroc0d3.name;\n\tvar z_address = zeroc0d3.location;\n\tvar z_email   = zeroc0d3.email;\n\t\t\n    it('should return user data', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n\n    it('should have a full name', function() {\n       z_name.should.be.an('object');\n       z_name.should.have.property('title').and.not.empty;\n       z_name.should.have.property('first').and.not.empty;\n       z_name.should.have.property('last').and.not.empty;\n    });\n    \n    it('should have a gender ('+z_gender+')', function() {\n       z_gender.should.equal(\"male\");\n    });\n    \n    it('should have a email ('+z_email+')', function() {\n       z_gender.should.not.empty;\n    });\n\n    it('should have an address', function() {\n       z_address.should.be.an('object');\n       z_address.should.have.property('street').and.not.empty;\n       z_address.should.have.property('city').and.not.empty;\n    });    \n    \n});",
				"currentHelper": "normal",
				"helperAttributes": {},
				"time": 1479554422668,
				"name": "Response JSON - Plain",
				"description": "JSON response body",
				"collectionId": "1c88d910-7048-d30d-7071-22fca341b2ee",
				"responses": []
			}
		],
		"timestamp": 1479548300422,
		"synced": false,
		"syncedFilename": "",
		"remote_id": 712720,
		"remoteLink": null,
		"remoteLinkUpdatedAt": null,
		"public": false,
		"owner": "260154",
		"subscribed": false,
		"createdAt": 1479548300422,
		"updatedAt": 1479555026052,
		"write": true,
		"isDeleted": false,
		"published": false,
		"favorite": true,
		"permissions": {},
		"syncedPermissions": {},
		"sharedWithTeam": false
	},
	"folder": null,
	"environment": null,
	"globals": [],
	"results": [
		{
			"id": "23f39c5a-80d9-3c22-3af9-42f46997a775",
			"name": "Fetch PostmanBDD",
			"url": "http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"PostmanBDD library ready": true
			},
			"testPassFailCounts": {
				"PostmanBDD library ready": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				970
			],
			"allTests": [
				{
					"PostmanBDD library ready": true
				}
			],
			"time": 970,
			"totalRequestTime": 970,
			"iterationResults": {}
		},
		{
			"id": "df9739a6-d1a7-fe17-991d-29696cb48ea3",
			"name": "Response JSON - Plain",
			"url": "https://randomuser.me/api/?nat=us&gender=male",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"Get user info =>  should return user data": true,
				"Get user info =>  should have a full name": true,
				"Get user info =>  should have a gender (male)": true,
				"Get user info =>  should have a email (dean.peterson@example.com)": true,
				"Get user info =>  should have an address": true
			},
			"testPassFailCounts": {
				"Get user info =>  should return user data": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a full name": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a gender (male)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a email (dean.peterson@example.com)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have an address": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				1008
			],
			"allTests": [
				{
					"Get user info =>  should return user data": true,
					"Get user info =>  should have a full name": true,
					"Get user info =>  should have a gender (male)": true,
					"Get user info =>  should have a email (dean.peterson@example.com)": true,
					"Get user info =>  should have an address": true
				}
			],
			"time": 1008,
			"totalRequestTime": 1008,
			"iterationResults": {}
		},
		{
			"id": "13349309-c098-7c83-f8ab-3db372516bd1",
			"name": "Response JSON - Conditional",
			"url": "https://randomuser.me/api/?nat=us&gender=male",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"Get user info =>  should return user data": true,
				"Get user info =>  should have a full name": true,
				"Get user info =>  should have a gender (male)": true,
				"Get user info =>  should have a email (dustin.davis@example.com)": true,
				"Get user info =>  should have an address": true,
				"Successfully show user info": true
			},
			"testPassFailCounts": {
				"Get user info =>  should return user data": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a full name": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a gender (male)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a email (dustin.davis@example.com)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have an address": {
					"pass": 1,
					"fail": 0
				},
				"Successfully show user info": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				306
			],
			"allTests": [
				{
					"Get user info =>  should return user data": true,
					"Get user info =>  should have a full name": true,
					"Get user info =>  should have a gender (male)": true,
					"Get user info =>  should have a email (dustin.davis@example.com)": true,
					"Get user info =>  should have an address": true,
					"Successfully show user info": true
				}
			],
			"time": 306,
			"totalRequestTime": 306,
			"iterationResults": {}
		},
		{
			"id": "cbec48e5-bdb6-cdc0-0924-e1ae316c4902",
			"name": "Response JSON - Schema",
			"url": "https://randomuser.me/api/?nat=us&gender=male",
			"totalTime": 0,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"tests": {
				"Get user info =>  should return user data": true,
				"Get user info =>  should have a full name": true,
				"Get user info =>  should have a gender (male)": true,
				"Get user info =>  should have a email (daniel.elliott@example.com)": true,
				"Get user info =>  should have an address": true,
				"Get user info =>  should validated format schema": true,
				"Successfully show user info": true
			},
			"testPassFailCounts": {
				"Get user info =>  should return user data": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a full name": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a gender (male)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a email (daniel.elliott@example.com)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have an address": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should validated format schema": {
					"pass": 1,
					"fail": 0
				},
				"Successfully show user info": {
					"pass": 1,
					"fail": 0
				}
			},
			"times": [
				349
			],
			"allTests": [
				{
					"Get user info =>  should return user data": true,
					"Get user info =>  should have a full name": true,
					"Get user info =>  should have a gender (male)": true,
					"Get user info =>  should have a email (daniel.elliott@example.com)": true,
					"Get user info =>  should have an address": true,
					"Get user info =>  should validated format schema": true,
					"Successfully show user info": true
				}
			],
			"time": 349,
			"totalRequestTime": 349,
			"iterationResults": {}
		}
	],
	"totalPass": 19,
	"totalFail": 0,
	"totalTime": 2633,
	"lifecycle": "done",
	"willStop": false,
	"requests": [
		{
			"name": "Fetch PostmanBDD",
			"id": "23f39c5a-80d9-3c22-3af9-42f46997a775",
			"url": "http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js",
			"time": 970,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"PostmanBDD library ready": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"PostmanBDD library ready"
			],
			"gridData": [
				[
					true
				]
			],
			"tests": {
				"PostmanBDD library ready": true
			}
		},
		{
			"name": "Response JSON - Plain",
			"id": "df9739a6-d1a7-fe17-991d-29696cb48ea3",
			"url": "https://randomuser.me/api/?nat=us&gender=male",
			"time": 1008,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"Get user info =>  should return user data": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a full name": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a gender (male)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a email (dean.peterson@example.com)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have an address": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Get user info =>  should return user data",
				"Get user info =>  should have a full name",
				"Get user info =>  should have a gender (male)",
				"Get user info =>  should have a email (dean.peterson@example.com)",
				"Get user info =>  should have an address"
			],
			"gridData": [
				[
					true,
					true,
					true,
					true,
					true
				]
			],
			"tests": {
				"Get user info =>  should return user data": true,
				"Get user info =>  should have a full name": true,
				"Get user info =>  should have a gender (male)": true,
				"Get user info =>  should have a email (dean.peterson@example.com)": true,
				"Get user info =>  should have an address": true
			}
		},
		{
			"name": "Response JSON - Conditional",
			"id": "13349309-c098-7c83-f8ab-3db372516bd1",
			"url": "https://randomuser.me/api/?nat=us&gender=male",
			"time": 306,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"Get user info =>  should return user data": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a full name": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a gender (male)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a email (dustin.davis@example.com)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have an address": {
					"pass": 1,
					"fail": 0
				},
				"Successfully show user info": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Get user info =>  should return user data",
				"Get user info =>  should have a full name",
				"Get user info =>  should have a gender (male)",
				"Get user info =>  should have a email (dustin.davis@example.com)",
				"Get user info =>  should have an address",
				"Successfully show user info"
			],
			"gridData": [
				[
					true,
					true,
					true,
					true,
					true,
					true
				]
			],
			"tests": {
				"Get user info =>  should return user data": true,
				"Get user info =>  should have a full name": true,
				"Get user info =>  should have a gender (male)": true,
				"Get user info =>  should have a email (dustin.davis@example.com)": true,
				"Get user info =>  should have an address": true,
				"Successfully show user info": true
			}
		},
		{
			"name": "Response JSON - Schema",
			"id": "cbec48e5-bdb6-cdc0-0924-e1ae316c4902",
			"url": "https://randomuser.me/api/?nat=us&gender=male",
			"time": 349,
			"responseCode": {
				"code": 200,
				"name": "OK",
				"detail": "Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request the response will contain an entity describing or containing the result of the action."
			},
			"testPassFailCounts": {
				"Get user info =>  should return user data": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a full name": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a gender (male)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have a email (daniel.elliott@example.com)": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should have an address": {
					"pass": 1,
					"fail": 0
				},
				"Get user info =>  should validated format schema": {
					"pass": 1,
					"fail": 0
				},
				"Successfully show user info": {
					"pass": 1,
					"fail": 0
				}
			},
			"gridTitles": [
				"Get user info =>  should return user data",
				"Get user info =>  should have a full name",
				"Get user info =>  should have a gender (male)",
				"Get user info =>  should have a email (daniel.elliott@example.com)",
				"Get user info =>  should have an address",
				"Get user info =>  should validated format schema",
				"Successfully show user info"
			],
			"gridData": [
				[
					true,
					true,
					true,
					true,
					true,
					true,
					true
				]
			],
			"tests": {
				"Get user info =>  should return user data": true,
				"Get user info =>  should have a full name": true,
				"Get user info =>  should have a gender (male)": true,
				"Get user info =>  should have a email (daniel.elliott@example.com)": true,
				"Get user info =>  should have an address": true,
				"Get user info =>  should validated format schema": true,
				"Successfully show user info": true
			}
		}
	],
	"synced": false
}